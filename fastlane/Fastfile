require 'dotenv'
Dotenv.load('.env')   # ✅ 自动加载 .env 文件内容

default_platform(:ios)

username         = ENV["FASTLANE_USER"]
asc_key_id       = ENV["ASC_KEY_ID"]
asc_issuer_id    = ENV["ASC_ISSUER_ID"]
asc_key_filepath = ENV["ASC_KEY_FILEPATH"]

scheme        = ENV["SCHEME"]
bundle_id     = ENV["BUNDLE_ID"]
app_name      = ENV["APP_NAME"]
export_method = ENV["EXPORT_METHOD"] || "app-store"  # 默认 app-store

platform :ios do

  before_all do |lane, options|
    UI.header "Step: before_all"
    UI.important "username = #{username}"
    UI.important "asc_key_id = #{asc_key_id}"
    UI.important "asc_issuer_id = #{asc_issuer_id}"
    UI.important "asc_key_content = #{asc_key_filepath}"
    UI.important "bundle_id = #{bundle_id}"
    UI.important "app_name = #{app_name}"
    UI.important "export_method = #{export_method}"

    setup_circle_ci
  end

  ######################################################
  # 🛠 一键修复证书 + 打包 IPA
  ######################################################
  lane :release do
    # 1️⃣ 检查证书
    UI.header("Step 1️⃣: 检查证书有效性")
    begin
      match_result = match(
        type: "appstore",
        readonly: true,
        app_identifier: [bundle_id],
        username: username
      )
      UI.success("✅ 找到可用证书")
    rescue => e
      UI.important("⚠️ 没有可用证书或证书过期: #{e}")

      # 2️⃣ 生成新证书 + 描述文件
      UI.header("Step 2️⃣: 生成新证书和描述文件")
      match_result = match(
        type: "appstore",
        readonly: false,
        force_for_new_devices: true,
        app_identifier: [bundle_id],
        username: username
      )
      UI.success("✅ 新证书和描述文件生成完成")
    end

    # 3️⃣ 更新项目签名配置
    UI.header("Step 3️⃣: 更新签名配置")
    profile_name = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING][bundle_id]
    unless profile_name
      UI.user_error!("❌ 找不到描述文件，请确认 match 成功")
    end

    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: profile_name,
      targets: [scheme],
      build_configurations: ["Release"],
      team_id: ENV["TEAM_ID"]
    )
    UI.success("✅ 签名配置已更新")

    # 4️⃣ 打包 IPA
    UI.header("Step 4️⃣: 打包 IPA")
    gym(
      scheme: scheme,
      configuration: "Release",
      export_method: export_method,
      clean: true,
      output_directory: "./build",
      output_name: "#{app_name}.ipa"
    )

    UI.success("🎉 打包完成！IPA 文件已输出到 ./build/#{app_name}.ipa")
  end

end
